{
	"info": {
		"_postman_id": "f2efca76-89aa-4c9b-87a7-1a2d2f22c329",
		"name": "Pet_Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PET",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a6f9d21-37ee-49d8-ab3a-60997fc80f6f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d9fac3a-90b5-46b0-b5ac-f36722a89e84",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_pet_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_pet_id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{url}}/v2/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet"
							]
						},
						"description": "Pet object that needs to be added to the store\n\nResponce 405"
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2853c282-0a0f-4ec9-8fa1-7e662ed87a31",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"name\" : {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_pet_id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{url}}/v2/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet"
							]
						},
						"description": "Pet object that needs to be added to the store\n\nResponce 405\nCan be also 400,404"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'available'\"] = _.isEqual(element.status, \"available\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=available",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'available'\"] = _.isEqual(element.status, \"sold\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=sold",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "sold"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'pending'\"] = _.isEqual(element.status, \"pending\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=pending",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Find by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b701177-41cc-4785-9ab1-f2c52970c977",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"tests[\"Content-Type is json\"] = pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"",
									"",
									"var jsonData = pm.response.json()",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"name\" : {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"tests['Schema is valid'] = pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						},
						"description": "ID of pet to return"
					},
					"response": []
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "846f5e92-b25b-44fa-b11d-ce84b30e5750",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "test1239999999",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b701177-41cc-4785-9ab1-f2c52970c977",
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"tests[\"Content-Type is json\"] = pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						},
						"description": "ID of pet to return"
					},
					"response": []
				}
			]
		},
		{
			"name": "STORE",
			"item": [
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25de4a3f-b59d-4378-b789-aa047063fbe8",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/inventory",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": []
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d159ba26-e397-401e-a3f8-89a8807cdc41",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39bb0165-dd53-485b-9438-a296e99c6507",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_order_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_order_id}},\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2019-03-27T19:40:17.436Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						"url": {
							"raw": "{{url}}/v2/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						},
						"description": "order placed for purchasing the pet\n"
					},
					"response": []
				},
				{
					"name": "Place invalid order ( Bad Request )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d159ba26-e397-401e-a3f8-89a8807cdc41",
								"exec": [
									"tests[\"returns 500 (should return 400 Bad Request really)\"] = pm.response.code == 500",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39bb0165-dd53-485b-9438-a296e99c6507",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_order_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						},
						"description": "Sending no body should result in 400 Bad Request but the Petstore API returns 500 Server Error. Shame!"
					},
					"response": []
				},
				{
					"name": "Place order with bad timestamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d159ba26-e397-401e-a3f8-89a8807cdc41",
								"exec": [
									"tests[\"returns 500 (should return 400 Bad Request really)\"] = pm.response.code == 500",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39bb0165-dd53-485b-9438-a296e99c6507",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_order_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_order_id}},\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2019na;lskdals;dksal;dkasl;dkas;ldkas;l:40:17.436Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						"url": {
							"raw": "{{url}}/v2/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						},
						"description": "Sending no body should result in 400 Bad Request but the Petstore API returns 500 Server Error. Shame!"
					},
					"response": []
				},
				{
					"name": "Place order with bad  request ( field type )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d159ba26-e397-401e-a3f8-89a8807cdc41",
								"exec": [
									"tests[\"returns 200 (should return 400 Bad Request really)\"] = pm.response.code == 200",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39bb0165-dd53-485b-9438-a296e99c6507",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_order_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_order_id}},\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2019-03-27T19:40:17.436Z\",\n  \"status\": 1,\n  \"complete\": false\n}"
						},
						"url": {
							"raw": "{{url}}/v2/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						},
						"description": "Sending invalid type field should result in 400 Bad Request but the Petstore API converst the type and returns 200 OK"
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7689e18-fc83-4a6f-b0b4-2f3799452e68",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{random_order_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{random_order_id}}"
							]
						},
						"description": "ID of pet that needs to be fetched\n\nFor valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Find purchase order by invalid ID ( 404 )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b166daa4-1e67-4388-a2d1-87f4c8a5889b",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"new_random_order_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dfbcc801-8566-4d66-b599-305571104bff",
								"exec": [
									"tests[\"returns 404\"] = pm.response.code == 404"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{new_random_order_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{new_random_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f897afa-1e6b-4966-84d7-6d3d7824ba35",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{random_order_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{random_order_id}}"
							]
						},
						"description": "ID of the order that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Validate order deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceb646ae-a0ff-4083-921e-3be5f9b93de1",
								"exec": [
									"tests[\"returns 404\"] = pm.response.code == 404"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{random_order_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{random_order_id}}"
							]
						},
						"description": "ID of pet that needs to be fetched\n\nFor valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				}
			]
		},
		{
			"name": "USER",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1413dd01-9554-48d1-93e4-6e0cc35dfab4",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_user_id\", randomPetId)",
									"postman.setEnvironmentVariable(\"random_username\", randomPetId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "febf3b2c-b134-406f-893f-ea17c23a32c0",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_user_id}},\n  \"username\": {{random_username}},\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
						},
						"url": {
							"raw": "{{url}}/v2/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user"
							]
						},
						"description": "Created user object\n"
					},
					"response": []
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "013e5601-9184-4962-99aa-e365bc07c233",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_username}}"
							]
						},
						"description": "The name that needs to be fetched. Use user1 for testing."
					},
					"response": []
				},
				{
					"name": "Updated user ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb4abec7-418f-4bf6-a727-847e07fd881a",
								"exec": [
									"var username = postman.getEnvironmentVariable(\"random_username\")",
									"var updatedUsername = username + 99999;",
									"postman.setEnvironmentVariable(\"random_updated_username\", updatedUsername)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15674660-82a3-4247-8e28-dc260cf60585",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_user_id}},\n  \"username\": {{random_updated_username}},\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}\n"
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_username}}"
							]
						},
						"description": "name that need to be updated"
					},
					"response": []
				},
				{
					"name": "Get user by updated user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d27ecb2-af2c-4f57-a3a2-7fba9b3c302f",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_updated_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_updated_username}}"
							]
						},
						"description": "The name that needs to be fetched. Use user1 for testing."
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e513e8ae-f2f3-44d2-baf8-4bcbf4810e38",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d649277-881f-447d-ac22-7a01362d1467",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_user_id\", randomPetId)",
									"",
									"var randomPetId2 = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_user_id_2\", randomPetId2 )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": 0,\n    \"username\": {{random_user_id}},\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  },{\n    \"id\": 0,\n    \"username\": {{random_user_id_2}},\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"
						},
						"url": {
							"raw": "{{url}}/v2/user/createWithArray",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						},
						"description": "List of user object"
					},
					"response": []
				},
				{
					"name": "Get user1 from array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "013e5601-9184-4962-99aa-e365bc07c233",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id}}"
							]
						},
						"description": "The name that needs to be fetched. Use user1 for testing."
					},
					"response": []
				},
				{
					"name": "Get user2 from array",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "013e5601-9184-4962-99aa-e365bc07c233",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id_2}}"
							]
						},
						"description": "The name that needs to be fetched. Use user1 for testing."
					},
					"response": []
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "662e9ee3-e9d8-49c5-add2-0c0a9be358a8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf6011df-de2f-4318-8139-cd069555c9b5",
								"exec": [
									"tests[\"returns 200\"] = pm.response.code == 200",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/login?username={{random_user_id}}&password=string",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{random_user_id}}"
								},
								{
									"key": "password",
									"value": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out current  user in session",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete random user",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_username}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Check deleted random user",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_username}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Delete random user id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Check deleted random user id",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Delete random user id 2",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id_2}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				},
				{
					"name": "Check deleted random user id 2",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{random_user_id_2}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{random_user_id_2}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				}
			]
		}
	]
}