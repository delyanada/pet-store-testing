{
	"info": {
		"_postman_id": "f2efca76-89aa-4c9b-87a7-1a2d2f22c329",
		"name": "Pet_Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PET",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a6f9d21-37ee-49d8-ab3a-60997fc80f6f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d9fac3a-90b5-46b0-b5ac-f36722a89e84",
								"exec": [
									"var randomPetId = _.random(999999999)",
									"postman.setEnvironmentVariable(\"random_pet_id\", randomPetId)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_pet_id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{url}}/v2/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet"
							]
						},
						"description": "Pet object that needs to be added to the store\n\nResponce 405"
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2853c282-0a0f-4ec9-8fa1-7e662ed87a31",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"name\" : {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"",
									"pm.test('Schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{random_pet_id}},\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "{{url}}/v2/pet",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet"
							]
						},
						"description": "Pet object that needs to be added to the store\n\nResponce 405\nCan be also 400,404"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'available'\"] = _.isEqual(element.status, \"available\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=available",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status sold",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'available'\"] = _.isEqual(element.status, \"sold\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=sold",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "sold"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status pending",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea153ba-5cb4-4d9e-864a-36ccea6cfa00",
								"exec": [
									"tests[\"Status code is 200\"] = _.isEqual(responseCode.code, 200)",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"jsonData.forEach(function(element) {",
									"    tests[\"All status should be 'pending'\"] = _.isEqual(element.status, \"pending\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/findByStatus?status=pending",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								}
							]
						},
						"description": "Status values that need to be considered for filter\nAvailable values : available, pending, sold\n\nResponce 200 or 400"
					},
					"response": []
				},
				{
					"name": "Find by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b701177-41cc-4785-9ab1-f2c52970c977",
								"exec": [
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"tests[\"Content-Type is json\"] = pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"",
									"",
									"var jsonData = pm.response.json()",
									"",
									"var schema = {",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"category\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"name\" : {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"tests['Schema is valid'] = pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						},
						"description": "ID of pet to return"
					},
					"response": []
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "846f5e92-b25b-44fa-b11d-ce84b30e5750",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "test1239999999",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api_key",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b701177-41cc-4785-9ab1-f2c52970c977",
								"exec": [
									"pm.test(\"Status code is 404\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"tests[\"Content-Type is json\"] = pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/pet/{{random_pet_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"pet",
								"{{random_pet_id}}"
							]
						},
						"description": "ID of pet to return"
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Returns pet inventories by status",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/inventory",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": []
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d159ba26-e397-401e-a3f8-89a8807cdc41",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"petId\": 0,\n  \"quantity\": 0,\n  \"shipDate\": \"2019-03-27T19:40:17.436Z\",\n  \"status\": \"placed\",\n  \"complete\": false\n}"
						},
						"url": {
							"raw": "{{url}}/v2/store/order",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						},
						"description": "order placed for purchasing the pet\n"
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{orderId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderId}}"
							]
						},
						"description": "ID of pet that needs to be fetched\n\nFor valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Delete purchase order by ID",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/store/order/{{order_Id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{order_Id}}"
							]
						},
						"description": "ID of the order that needs to be deleted"
					},
					"response": []
				}
			]
		},
		{
			"name": "USER",
			"item": [
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}"
						},
						"url": {
							"raw": "{{url}}/v2/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user"
							]
						},
						"description": "Created user object\n"
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"
						},
						"url": {
							"raw": "{{url}}/v2/user/createWithArray",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						},
						"description": "List of user object"
					},
					"response": []
				},
				{
					"name": "Creates list of users with given input array",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": 0,\n    \"username\": \"string\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"password\": \"string\",\n    \"phone\": \"string\",\n    \"userStatus\": 0\n  }\n]"
						},
						"url": {
							"raw": "{{url}}/v2/user/createWithList",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"createWithList"
							]
						},
						"description": "List of user object"
					},
					"response": []
				},
				{
					"name": "Logs user into the system",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out current in user session",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by user name",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						},
						"description": "The name that needs to be fetched. Use user1 for testing."
					},
					"response": []
				},
				{
					"name": "Updated user ",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": 0\n}\n"
						},
						"url": {
							"raw": "{{url}}/v2/user/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						},
						"description": "name that need to be updated"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/v2/user/{{username}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"user",
								"{{username}}"
							]
						},
						"description": "The name that needs to be deleted"
					},
					"response": []
				}
			]
		}
	]
}